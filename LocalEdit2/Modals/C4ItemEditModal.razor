@using Blazorise.Components
@using LocalEdit.C4Types
@inherits LE_ModalBase
<Modal @ref="modalRef" @bind-Visible="@modalVisible" Closing="@OnModalClosing" Opened="@OnModalOpened">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Edit Item</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
@*
<Alert @ref="myAlert" Color="Color.Success">
    <AlertMessage>
        Alert test.
    </AlertMessage>
    <CloseButton />
</Alert>
*@

@*https://blazorise.com/docs/components/validation*@
@*<Validations Mode="ValidationMode.Manual">*@
<Validations @ref="validations" Mode="ValidationMode.Manual" ValidateOnLoad=false>
    <Blazorise.ValidationSummary Label="Following error occurs..." />
@*    <Field>
        <FieldLabel>Name with validation</FieldLabel>
        <Validation Validator="ValidationRule.IsNotEmpty">
            <Blazorise.TextEdit Placeholder="Enter name (validated)">
                <Feedback>
                    <ValidationNone>Please enter the name.</ValidationNone>
                    <ValidationSuccess>Name is good.</ValidationSuccess>
                    <ValidationError>Enter valid name!</ValidationError>
                </Feedback>
            </Blazorise.TextEdit>
        </Validation>
    </Field>
*@
@*    <Field>
        <FieldLabel>Name</FieldLabel>
        <TextEdit Class="textfield-box" Placeholder="Enter name (Boxed)..." />
    </Field>
    <Field>
        <FieldLabel>Name</FieldLabel>
        <TextEdit Placeholder="Enter name..." />
    </Field>
*@

        <Field>
            <FieldLabel>Item Type</FieldLabel>
            <SelectList TItem="C4TypeNamePair"
            TValue="C4TypeEnum"
            Data="@c4Types"
            TextField="@((item)=>item.Description)"
            ValueField="@((item)=>item.Value)"
            @bind-SelectedValue="@SelectedNode.ItemType"
            DefaultItemText="Choose node type" />

@*

                    <Select @bind-SelectedValue="@SelectedNode.ItemType">


            @if (ShouldShow(C4TypeEnum.Person))
            {
                <SelectItem Value=C4TypeEnum.Person>Person</SelectItem>
            }
            @if (ShouldShow(C4TypeEnum.System))
            {
                <SelectItem Value=C4TypeEnum.System>System</SelectItem>
            }
            @if (ShouldShow(C4TypeEnum.EnterpriseBoundary))
            {
                <SelectItem Value=C4TypeEnum.EnterpriseBoundary>Enterprise</SelectItem>
            }
            @if (ShouldShow(C4TypeEnum.Container))
            {
                <SelectItem Value=C4TypeEnum.Container>Container</SelectItem>
            }
            @if (ShouldShow(C4TypeEnum.Component))
            {
                <SelectItem Value=C4TypeEnum.Component>Component</SelectItem>
            }
            @if (ShouldShow(C4TypeEnum.Database))
            {
                <SelectItem Value=C4TypeEnum.Database>Database</SelectItem>
            }
            @if (ShouldShow(C4TypeEnum.Node))
            {
                <SelectItem Value=C4TypeEnum.Node>Node</SelectItem>
            }

            </Select>
                    *@
                </Field>



    @if (@showA)
    {
        <Field>
            <FieldLabel>Text</FieldLabel>
            <TextEdit @bind-Text="SelectedNode.Text" />
        </Field>
    }

    <Field>
        <FieldLabel>Alias</FieldLabel>
        <TextEdit @bind-Text="SelectedNode.Alias" />
        @*            <ValidationMessage For="@(() => item.Alias)" />
        *@
    </Field>

    <Field>
        <FieldLabel>Description</FieldLabel>
        <TextEdit @bind-Text="SelectedNode.Description" />
    </Field>

    <Field>
        <FieldLabel>Technology</FieldLabel>
        <TextEdit @bind-Text="SelectedNode.Technology" />
    </Field>

    @*
        <Field>
        <FieldLabel>From</FieldLabel>
        <TextEdit @bind-Text="SelectedNode.From" />
        </Field>

        <Field>
        <FieldLabel>To</FieldLabel>
        <TextEdit @bind-Text="SelectedNode.To" />
        </Field>
    *@
    <Field>
        <Switch TValue="bool" @bind-Checked="@SelectedNode.IsDatabase">Database</Switch>
    </Field>

    <Field>
        <Switch TValue="bool" @bind-Checked="@SelectedNode.IsExternal">External</Switch>
    </Field>

    @*    <div class="form-group" align="right">
        <button type="submit" class="btn btn-success">Register</button>
        </div>
    *@
</Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@CloseModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@TryCloseModal">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
