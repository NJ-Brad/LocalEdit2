@page "/CountDown"
@using LocalEdit2.Modals;

<PageTitle>@title</PageTitle>

    <Layout>
        <LayoutHeader Fixed>
            <span style="background-color:lightskyblue">
            <h1 style="background-color:lightskyblue">@currentTime</h1>
        </span>
    </LayoutHeader>
        <LayoutContent>

<LocalEdit2.Shared.BigText @ref="bigTextRef" />
<br />
<h1>@currentTime</h1>

<Button Size="Size.Small" Color="Color.Primary" Clicked="@Configure">
    <Icon Name="IconName.Play" />
    Configure
</Button>
    </LayoutContent>
</Layout>


<LocalEdit2.Shared.BlazorTimer @ref="timerRef" Ticked="@OnTimerTicked" Interval="1000"></LocalEdit2.Shared.BlazorTimer>

<LocalEdit2.Modals.CountDownModal @ref="countDownModalRef" Closed="@OnCountDownModalClosed"></LocalEdit2.Modals.CountDownModal>

@code {
    string title = "Meeting Countdown";

    string currentTime = "Now";

    BlazorTimer? timerRef = null;
    BigText? bigTextRef = null;
    bool started = false;

    TimeSpan? startTime = null;
    TimeSpan? endTime = null;
    int? warningMinutes = 5;
    //    TimeSpan? remainingTime = null;

    CountDownModal? countDownModalRef = null;

    private Task Configure()
    {
        countDownModalRef?.ShowModal();

        return Task.CompletedTask;
    }


    private Task OnCountDownModalClosed()
    {
        // remove the new item, if add was cancelled
        if (countDownModalRef?.Result == ModalResult.Cancel)
        {
            //Document.Items.Remove(selectedItemRow);
            //selectedItemRow = null;
        }
        else
        {
            startTime = countDownModalRef?.Configuration.StartTime;
            endTime = countDownModalRef?.Configuration.EndTime;
            warningMinutes = countDownModalRef?.Configuration.WarningMinutes;
            started = true;
        }
        //        adding = false;

        InvokeAsync(() => StateHasChanged());

        return Task.CompletedTask;
    }


    private void ButtonClicked()
    {
        started = true;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }


    Task OnTimerTicked()
    {
        //        TimeZoneInfo tz = TimeZoneInfo.Local;

        DateTime calcCurrentTime = LocalEdit2.Shared.DateTimeExtension.ToRealLocalTime(DateTime.Now);

        if (!started)
        {
            bigTextRef?.RenderText("Meeting has not started yet.");
            title = "Meeting Countdown";
        }
        //else if (DateTime.Now.TimeOfDay < startTime)
        else if (calcCurrentTime.TimeOfDay < startTime)
        {
            bigTextRef?.RenderText("Meeting has not started yet.");
            title = "Meeting has not started yet.";
        }
        //else if (DateTime.Now.TimeOfDay > endTime)
        else if (calcCurrentTime.TimeOfDay > endTime)
        {
            bigTextRef?.RenderText("Meeting should have ended by now.");
            title = "Overtime";
        }
        //else if ((DateTime.Now.TimeOfDay > startTime) && (DateTime.Now.TimeOfDay < endTime))
        else if ((calcCurrentTime.TimeOfDay > startTime) && (calcCurrentTime.TimeOfDay < endTime))
        {
            //TimeSpan remainingTime = endTime.Value - DateTime.Now.TimeOfDay;
            TimeSpan remainingTime = endTime.Value - calcCurrentTime.TimeOfDay;
            bigTextRef?.RenderText(remainingTime.ToString(@"hh\:mm\:ss"), (remainingTime.TotalMinutes < warningMinutes) ? "red" : "black");
            title = remainingTime.ToString(@"hh\:mm\:ss");
        }

        //if (fileManagementModalRef.Result == ModalResult.OK)
        //{
        //    Document = (C4Workspace)JsonSerializer.Deserialize(fileManagementModalRef.FileText, typeof(C4Workspace));
        //    InvokeAsync(() => StateHasChanged());
        //}

        currentTime = calcCurrentTime.ToString();
        InvokeAsync(() => StateHasChanged());

        return Task.CompletedTask;
    }

}
